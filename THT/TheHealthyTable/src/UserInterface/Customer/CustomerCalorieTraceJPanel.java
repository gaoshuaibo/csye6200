/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Customer;

import Business.Common.CalorieTrace;
import Business.Order.Order;
import Business.User.Customer;
import java.awt.Color;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;

/**
 *
 * @author Alex
 */
public class CustomerCalorieTraceJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Customer customer;

    /**
     * Creates new form CustomerCalorieTraceJPanel
     */
    public CustomerCalorieTraceJPanel(JPanel userProcessContainer, Customer customer) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.customer = customer;
        populateGraphic();
    }

    public void populateGraphic() {
        JFreeChart timeSeriesChart = ChartFactory.createTimeSeriesChart(
                "Calorie Trace", "Date Time", "Calorie", createDataset(), true,
                true, false);
        timeSeriesChart.setBackgroundPaint(Color.GRAY);
        XYPlot plot = timeSeriesChart.getXYPlot();

        DateAxis dateaxis = (DateAxis) plot.getDomainAxis();
        SimpleDateFormat sfd = new SimpleDateFormat("yy-MM-dd");
        dateaxis.setDateFormatOverride(sfd);

        setXYPolt(plot);

        ChartPanel chartPanel = new ChartPanel(timeSeriesChart);
        graphicJPanel.removeAll();
        graphicJPanel.add(chartPanel);
    }

    public static void setXYPolt(XYPlot plot) {
        plot.setDomainGridlinePaint(Color.LIGHT_GRAY);
        plot.setRangeGridlinePaint(Color.LIGHT_GRAY);
        XYItemRenderer r = plot.getRenderer();
        if (r instanceof XYLineAndShapeRenderer) {
            XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) r;
            renderer.setBaseShapesVisible(true);
            renderer.setBaseShapesFilled(false);
        }
    }

    private XYDataset createDataset() {
        TimeSeriesCollection dataset = new TimeSeriesCollection();
        TimeSeries timeSeriesCalorie = new TimeSeries("Calorie", Day.class);

        ArrayList<CalorieTrace> calorieTraceList = getDisplayData();

        for (CalorieTrace ct : calorieTraceList) {
            timeSeriesCalorie.add(ct.getDay(), ct.getCalorie());
        }

        dataset.addSeries(timeSeriesCalorie);
        return dataset;
    }

    private ArrayList<CalorieTrace> getDisplayData() {
        DateFormat dateFormatTo = new SimpleDateFormat("yyyy/MM/dd");
        DateFormat dateFormatFrom = new SimpleDateFormat("HH:mm:ss yyyy/MM/dd");
        ArrayList<CalorieTrace> calorieTraceList = new ArrayList<CalorieTrace>();
        for (Order o : customer.getOrderDirectory().getOrderList()) {
            try {
                //String date = (dateFormatFrom.format(o.getTimeStamp())).substring(9);
                Day day = new Day(o.getTimeStamp());
                CalorieTrace ct = searchCalorieTrace(day, calorieTraceList);
                if (ct == null) {
                    ct = new CalorieTrace();
                    ct.setDay(day);
                    ct.setCalorie(o.getCalorieBalance());
                    calorieTraceList.add(ct);
                } else {
                    ct.setCalorie(ct.getCalorie() + o.getCalorieBalance());
                }
            } catch (Exception ex) {
            }
        }
        return calorieTraceList;
    }

    private CalorieTrace searchCalorieTrace(Day day, ArrayList<CalorieTrace> trace) {
        for (CalorieTrace ct : trace) {
            if (ct.getDay().equals(day)) {
                return ct;
            }
        }
        return null;
    }

//    private Day getDay(String date) {
//        try {
//            DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss yyyy/MM/dd");
//            Date date = dateFormat.parse(vitalSign.getTime());
//            
//            Day day = new Day(date);
//            return second;
//        } catch (Exception ex) {
//            return null;
//        }
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graphicJPanel = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));

        graphicJPanel.setBackground(new java.awt.Color(255, 255, 255));
        graphicJPanel.setMaximumSize(new java.awt.Dimension(630, 450));
        graphicJPanel.setMinimumSize(new java.awt.Dimension(630, 450));
        graphicJPanel.setPreferredSize(new java.awt.Dimension(630, 450));
        graphicJPanel.setRequestFocusEnabled(false);
        graphicJPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(graphicJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(graphicJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel graphicJPanel;
    // End of variables declaration//GEN-END:variables
}
